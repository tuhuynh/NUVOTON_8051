C51 COMPILER V9.01   AES                                                                   07/05/2018 15:01:43 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE AES
OBJECT MODULE PLACED IN .\Output\AES.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\AES.c BROWSE INCDIR(..\Include) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND
                    - PRINT(.\LST\AES.lst) OBJECT(.\Output\AES.obj)

line level    source

   1          #include "AES.h"
   2          static const unsigned char code S_Table[16][16] = {
   3          {0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76},
   4          {0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0},
   5          {0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15},
   6          {0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75},
   7          {0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84},
   8          {0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF},
   9          {0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8},
  10          {0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2},
  11          {0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73},
  12          {0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB},
  13          {0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79},
  14          {0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08},
  15          {0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A},
  16          {0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E},
  17          {0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF},
  18          {0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16}
  19          };
  20          /*
  21          *****************************************************************************************
  22          * Title         : Shift left  16 byte data
  23          * Description :
  24          *****************************************************************************************
  25          */
  26          void Shift_Left(unsigned char *Data)
  27          {
  28   1        unsigned char i;
  29   1        unsigned char Overflow = 0;
  30   1        //unsigned char High_Byte, Low_Byte;
  31   1      
  32   1        for(i = 0; i < 16; i++)
  33   1        {
  34   2          //Check for overflow on next byte except for the last byte
  35   2          if(i < 15)
  36   2          {
  37   3            //Check if upper bit is one
  38   3            if((Data[i+1] & 0x80) == 0x80)
  39   3            {
  40   4              Overflow = 1;
  41   4            }
  42   3            else
  43   3            {
  44   4              Overflow = 0;
  45   4            }
  46   3          }
  47   2          else
  48   2          {
  49   3            Overflow = 0;
  50   3          }
  51   2      
  52   2          //Shift one left
  53   2          Data[i] = (Data[i] << 1) + Overflow;
  54   2        }
C51 COMPILER V9.01   AES                                                                   07/05/2018 15:01:43 PAGE 2   

  55   1      }
  56          
  57          /*
  58          *****************************************************************************************
  59          * Title         : Exclusive OR 16 byte New_Data with Old_Data. Return New_Data.
  60          * Description :
  61          *****************************************************************************************
  62          */
  63          
  64          void XOR(unsigned char *New_Data,unsigned char *Old_Data)
  65          {
  66   1        unsigned char i;
  67   1      
  68   1        for(i = 0; i < 16; i++)
  69   1        {
  70   2          New_Data[i] = New_Data[i] ^ Old_Data[i];
  71   2        }
  72   1      }
  73          
  74          
  75          /*
  76          *****************************************************************************************
  77          * Title         : AES_Add_Round_Key
  78          * Description :
  79          *****************************************************************************************
  80          */
  81          void AES_Add_Round_Key(unsigned char *Round_Key, unsigned char (*State)[4])
  82          {
  83   1        unsigned char Row, Collum;
  84   1      
  85   1        for(Collum = 0; Collum < 4; Collum++)
  86   1        {
  87   2          for(Row = 0; Row < 4; Row++)
  88   2          {
  89   3            State[Row][Collum] ^= Round_Key[Row + (Collum << 2)];
  90   3          }
  91   2        }
  92   1      } // AES_Add_Round_Key
  93          
  94          /*
  95          *****************************************************************************************
  96          * Title         : AES_Sub_Byte
  97          * Description :
  98          *****************************************************************************************
  99          */
 100          unsigned char AES_Sub_Byte(unsigned char Byte)
 101          {
 102   1        unsigned char S_Row,S_Collum;
 103   1        unsigned char S_Byte;
 104   1      
 105   1        S_Row    = ((Byte >> 4) & 0x0F);
 106   1        S_Collum = ((Byte >> 0) & 0x0F);
 107   1        S_Byte   = S_Table [S_Row][S_Collum];
 108   1      
 109   1        return S_Table [ ((Byte >> 4) & 0x0F) ] [ ((Byte >> 0) & 0x0F) ]; // original
 110   1      
 111   1      } //    AES_Sub_Byte
 112          
 113          
 114          /*
 115          *****************************************************************************************
 116          * Title         : AES_Shift_Rows
C51 COMPILER V9.01   AES                                                                   07/05/2018 15:01:43 PAGE 3   

 117          * Description :
 118          *****************************************************************************************
 119          */
 120          void AES_Shift_Rows(unsigned char (*State)[4])
 121          {
 122   1        unsigned char Buffer;
 123   1      
 124   1        //Store firt byte in buffer
 125   1        Buffer      = State[1][0];
 126   1        //Shift all bytes
 127   1        State[1][0] = State[1][1];
 128   1        State[1][1] = State[1][2];
 129   1        State[1][2] = State[1][3];
 130   1        State[1][3] = Buffer;
 131   1      
 132   1        Buffer      = State[2][0];
 133   1        State[2][0] = State[2][2];
 134   1        State[2][2] = Buffer;
 135   1        Buffer      = State[2][1];
 136   1        State[2][1] = State[2][3];
 137   1        State[2][3] = Buffer;
 138   1      
 139   1        Buffer      = State[3][3];
 140   1        State[3][3] = State[3][2];
 141   1        State[3][2] = State[3][1];
 142   1        State[3][1] = State[3][0];
 143   1        State[3][0] = Buffer;
 144   1      }   //  AES_Shift_Rows
 145          
 146          
 147          /*
 148          *****************************************************************************************
 149          * Title         : AES_Mix_Collums
 150          * Description :
 151          *****************************************************************************************
 152          */
 153          void AES_Mix_Collums(unsigned char (*State)[4])
 154          {
 155   1        unsigned char Row,Collum;
 156   1        unsigned char a[4], b[4];
 157   1      
 158   1      
 159   1        for(Collum = 0; Collum < 4; Collum++)
 160   1        {
 161   2          for(Row = 0; Row < 4; Row++)
 162   2          {
 163   3            a[Row] =  State[Row][Collum];
 164   3            b[Row] = (State[Row][Collum] << 1);
 165   3      
 166   3            if((State[Row][Collum] & 0x80) == 0x80)
 167   3            {
 168   4              b[Row] ^= 0x1B;
 169   4            }
 170   3          }
 171   2      
 172   2          State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 173   2          State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 174   2          State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 175   2          State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 176   2        }
 177   1      }   //  AES_Mix_Collums
 178          
C51 COMPILER V9.01   AES                                                                   07/05/2018 15:01:43 PAGE 4   

 179          /*
 180          *****************************************************************************************
 181          * Title         : AES_Calculate_Round_Key
 182          * Description :
 183          *****************************************************************************************
 184          */
 185          void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
 186          {
 187   1        unsigned char i, j, b, Rcon;
 188   1        unsigned char Temp[4];
 189   1      
 190   1      
 191   1          //Calculate Rcon
 192   1        Rcon = 0x01;
 193   1        while(Round != 1)
 194   1        {
 195   2          b = Rcon & 0x80;
 196   2          Rcon = Rcon << 1;
 197   2      
 198   2          if(b == 0x80)
 199   2          {
 200   3            Rcon ^= 0x1b;
 201   3          }
 202   2          Round--;
 203   2        }
 204   1      
 205   1        //  Calculate first Temp
 206   1        //  Copy laste byte from previous key and subsitute the byte, but shift the array contents around by 1.
 207   1          Temp[0] = AES_Sub_Byte( Round_Key[12 + 1] );
 208   1          Temp[1] = AES_Sub_Byte( Round_Key[12 + 2] );
 209   1          Temp[2] = AES_Sub_Byte( Round_Key[12 + 3] );
 210   1          Temp[3] = AES_Sub_Byte( Round_Key[12 + 0] );
 211   1      
 212   1        //  XOR with Rcon
 213   1        Temp[0] ^= Rcon;
 214   1      
 215   1        //  Calculate new key
 216   1        for(i = 0; i < 4; i++)
 217   1        {
 218   2          for(j = 0; j < 4; j++)
 219   2          {
 220   3            Round_Key[j + (i << 2)]  ^= Temp[j];
 221   3            Temp[j]                   = Round_Key[j + (i << 2)];
 222   3          }
 223   2        }
 224   1      }   //  AES_Calculate_Round_Key
 225          
 226          
 227          /*
 228          *****************************************************************************************
 229          * Title         : AES_Encrypt
 230          * Description  :
 231          *****************************************************************************************
 232          */
 233          void AES_Encrypt(unsigned char *Data, unsigned char *Key)
 234          {
 235   1        unsigned char Row, Column, Round = 0;
 236   1        unsigned char Round_Key[16];
 237   1          unsigned char State[4][4];
 238   1      
 239   1        //  Copy input to State arry
 240   1        for( Column = 0; Column < 4; Column++ )
C51 COMPILER V9.01   AES                                                                   07/05/2018 15:01:43 PAGE 5   

 241   1        {
 242   2          for( Row = 0; Row < 4; Row++ )
 243   2          {
 244   3            State[Row][Column] = Data[Row + (Column << 2)];
 245   3          }
 246   2        }
 247   1      
 248   1        //  Copy key to round key
 249   1        memcpy( &Round_Key[0], &Key[0], 16 );
 250   1      
 251   1        //  Add round key
 252   1        AES_Add_Round_Key( Round_Key, State );
 253   1      
 254   1        //  Preform 9 full rounds with mixed collums
 255   1        for( Round = 1 ; Round < 10 ; Round++ )
 256   1        {
 257   2          //  Perform Byte substitution with S table
 258   2          for( Column = 0 ; Column < 4 ; Column++ )
 259   2          {
 260   3            for( Row = 0 ; Row < 4 ; Row++ )
 261   3            {
 262   4              State[Row][Column] = AES_Sub_Byte( State[Row][Column] );
 263   4            }
 264   3          }
 265   2      
 266   2          //  Perform Row Shift
 267   2          AES_Shift_Rows(State);
 268   2      
 269   2          //  Mix Collums
 270   2          AES_Mix_Collums(State);
 271   2      
 272   2          //  Calculate new round key
 273   2          AES_Calculate_Round_Key(Round, Round_Key);
 274   2      
 275   2              //  Add the round key to the Round_key
 276   2          AES_Add_Round_Key(Round_Key, State);
 277   2        }
 278   1      
 279   1        //  Perform Byte substitution with S table whitout mix collums
 280   1        for( Column = 0 ; Column < 4 ; Column++ )
 281   1        {
 282   2          for( Row = 0; Row < 4; Row++ )
 283   2          {
 284   3            State[Row][Column] = AES_Sub_Byte(State[Row][Column]);
 285   3          }
 286   2        }
 287   1      
 288   1        //  Shift rows
 289   1        AES_Shift_Rows(State);
 290   1      
 291   1        //  Calculate new round key
 292   1        AES_Calculate_Round_Key( Round, Round_Key );
 293   1      
 294   1          //  Add round key
 295   1        AES_Add_Round_Key( Round_Key, State );
 296   1      
 297   1        //  Copy the State into the data array
 298   1        for( Column = 0; Column < 4; Column++ )
 299   1        {
 300   2          for( Row = 0; Row < 4; Row++ )
 301   2          {
 302   3            Data[Row + (Column << 2)] = State[Row][Column];
C51 COMPILER V9.01   AES                                                                   07/05/2018 15:01:43 PAGE 6   

 303   3          }
 304   2        }
 305   1      } // AES_Encrypt


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1156    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      82
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
